@{
    ViewBag.Title = "Home Page";
}

@Html.Partial("_FrontPartial")
@Styles.Render("~/css/home.css")

<div class="jumbotron">
    <h1>Game Store</h1>
    <p>Welcome to Johnny's Game Store! You can purchase consoles, accessories and games here. You can register as 'Regular' user to purchase products. Or, register as 'Advanced' user to sell your own products!</p>
    <div class="row">
        <div class="col-sm-2">@Html.ActionLink("Console", "Console", "Product")</div>
        <div class="col-sm-2">@Html.ActionLink("Accessory", "Accessory", "Product")</div>
        <div class="col-sm-2">@Html.ActionLink("Game", "Game", "Product")</div>
        <div class="col-sm-2"></div>
        <div class="col-sm-2"></div>
        <div class="col-sm-4"></div>
    </div>
</div>

<div class="panel-group">
    <div class="panel panel-primary">
        <div class="panel-body">Default User Account</div>
    </div>
    <div class="panel panel-default">
        <ul class="list-group">
            <li class="list-group-item">admin@gamestore.com / admin</li>
            <li class="list-group-item">advanced@gamestore.com / advanced</li>
            <li class="list-group-item">regular@gamestore.com / regular</li>
        </ul>
    </div>
    <div id="carouselExampleControls" class="carousel slide" data-ride="carousel">
        <div class="carousel-inner">
            <div class="item active">
                <img class="d-block" src="~/images/sliders/banner2.jpg" alt="First slide">
            </div>
            <div class="item">
                <img class="d-block" src="~/images/sliders/banner3.jpg" alt="Second slide">
            </div>

        </div>
    </div>
</div>

<hr />
<h3>Sale off for Christmas Day</h3>
<div class="countdown-timer">
    <div class="container-segment">
        <div class="segment-title">Days</div>
        <div class="segment">
            <div class="flip-card" data-days-tens>
                <div class="top">2</div>
                <div class="bottom">2</div>
            </div>
            <div class="flip-card" data-days-ones>
                <div class="top">4</div>
                <div class="bottom">4</div>
            </div>
        </div>
    </div>

    <div class="container-segment">
        <div class="segment-title">Hours</div>
        <div class="segment">
            <div class="flip-card" data-hours-tens>
                <div class="top">2</div>
                <div class="bottom">2</div>
            </div>
            <div class="flip-card" data-hours-ones>
                <div class="top">4</div>
                <div class="bottom">4</div>
            </div>
        </div>
    </div>
    <div class="container-segment">
        <div class="segment-title">Minutes</div>
        <div class="segment">
            <div class="flip-card" data-minutes-tens>
                <div class="top">0</div>
                <div class="bottom">0</div>
            </div>
            <div class="flip-card" data-minutes-ones>
                <div class="top">0</div>
                <div class="bottom">0</div>
            </div>
        </div>
    </div>
    <div class="container-segment">
        <div class="segment-title">Seconds</div>
        <div class="segment">
            <div class="flip-card" data-seconds-tens>
                <div class="top">0</div>
                <div class="bottom">0</div>
            </div>
            <div class="flip-card" data-seconds-ones>
                <div class="top">0</div>
                <div class="bottom">0</div>
            </div>
        </div>
    </div>
</div>

@Styles.Render("~/css/home.css")

<script>
    $('.carousel').carousel({
        interval: 5000
    })

    const countToDate = new Date('2022-12-25T00:00:00')
    let previousTimeBetweenDates
    setInterval(() => {
        const currentDate = new Date()
        const timeBetweenDates = Math.ceil((countToDate - currentDate) / 1000)
        flipAllCards(timeBetweenDates)

        previousTimeBetweenDates = timeBetweenDates
    }, 250)

    function flipAllCards(time) {
        const seconds = time % 60
        const minutes = Math.floor(time / 60) % 60
        const hours = Math.floor(time / 3600) % 24
        const days = Math.floor(time / 86400)

        flip(document.querySelector("[data-days-tens]"), Math.floor(days / 10))
        flip(document.querySelector("[data-days-ones]"), days % 10)
        flip(document.querySelector("[data-hours-tens]"), Math.floor(hours / 10))
        flip(document.querySelector("[data-hours-ones]"), hours % 10)
        flip(document.querySelector("[data-minutes-tens]"), Math.floor(minutes / 10))
        flip(document.querySelector("[data-minutes-ones]"), minutes % 10)
        flip(document.querySelector("[data-seconds-tens]"), Math.floor(seconds / 10))
        flip(document.querySelector("[data-seconds-ones]"), seconds % 10)
    }

    function flip(flipCard, newNumber) {
        const topHalf = flipCard.querySelector(".top")
        const startNumber = parseInt(topHalf.textContent)
        if (newNumber === startNumber) return

        const bottomHalf = flipCard.querySelector(".bottom")
        const topFlip = document.createElement("div")
        topFlip.classList.add("top-flip")
        const bottomFlip = document.createElement("div")
        bottomFlip.classList.add("bottom-flip")

        top.textContent = startNumber
        bottomHalf.textContent = startNumber
        topFlip.textContent = startNumber
        bottomFlip.textContent = newNumber

        topFlip.addEventListener("animationstart", e => {
            topHalf.textContent = newNumber
        })
        topFlip.addEventListener("animationend", e => {
            topFlip.remove()
        })
        bottomFlip.addEventListener("animationend", e => {
            bottomHalf.textContent = newNumber
            bottomFlip.remove()
        })
        flipCard.append(topFlip, bottomFlip)
    }
</script>







